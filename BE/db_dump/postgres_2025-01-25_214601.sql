-- create table for storing the user information
-- Generated by the database client.
CREATE TABLE my_schema."User"(
    pubkey text NOT NULL,
    username text,
    email text,
    "totalEarnings" double precision NOT NULL DEFAULT 0.0,
    "withdrawnEarnings" double precision NOT NULL DEFAULT 0.0,
    "perfectCombinationsWon" integer NOT NULL DEFAULT 0,
    "createdAt" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "totalEarningsRank" integer,
    "withdrawnEarningsRank" integer,
    "perfectCombinationsRank" integer,
    PRIMARY KEY(pubkey)
);
CREATE UNIQUE INDEX User_username_key ON my_schema."User" USING btree ("username");
CREATE UNIQUE INDEX User_email_key ON my_schema."User" USING btree ("email");
CREATE UNIQUE INDEX User_pubkey_key ON my_schema."User" USING btree ("pubkey");


-- create table for storing the ticket information
-- Generated by the database client.
CREATE TABLE "Ticket"(
    pubkey text NOT NULL,
    currency "CurrencyType" NOT NULL DEFAULT 'USDT'::"CurrencyType",
    "entryFee" integer NOT NULL,
    "durationType" "DurationType" NOT NULL,
    duration "DurationTimeType",
    "endTime" timestamp without time zone,
    "mainBankAmount" double precision NOT NULL DEFAULT 0.0,
    "colBankAmount" double precision NOT NULL DEFAULT 0.0,
    "totalPlayers" integer NOT NULL DEFAULT 0,
    "createdAt" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "currentState" "TicketState" NOT NULL DEFAULT 'ACTIVE'::"TicketState",
    PRIMARY KEY(pubkey)
);
CREATE INDEX Ticket_duration_durationType_idx ON "Ticket" USING btree ("durationType","duration");
CREATE INDEX Ticket_currency_entryFee_idx ON "Ticket" USING btree ("entryFee","currency");
CREATE UNIQUE INDEX Ticket_pubkey_key ON "Ticket" USING btree ("pubkey");
CREATE INDEX Ticket_currentState_idx ON "Ticket" USING btree ("currentState");


-- create table for storing the ticket history information
-- Generated by the database client.
CREATE TABLE "TicketHistory"(
    id SERIAL NOT NULL,
    "ticketPubkey" text NOT NULL,
    "userPubkey" text NOT NULL,
    "actionTime" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "actionType" "TicketHistoryActionType" NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT TicketHistory_ticketPubkey_fkey FOREIGN key("ticketPubkey") REFERENCES "Ticket"(pubkey),
    CONSTRAINT TicketHistory_userPubkey_fkey FOREIGN key("userPubkey") REFERENCES "User"(pubkey)
);
CREATE INDEX TicketHistory_userPubkey_idx ON "TicketHistory" USING btree ("userPubkey");
CREATE INDEX TicketHistory_ticketPubkey_idx ON "TicketHistory" USING btree ("ticketPubkey");
CREATE INDEX TicketHistory_actionType_idx ON "TicketHistory" USING btree ("actionType");
CREATE UNIQUE INDEX TicketHistory_userPubkey_ticketPubkey_actionType_key ON "TicketHistory" USING btree ("ticketPubkey","userPubkey","actionType");


-- create table for storing the player ticket score information
-- Generated by the database client.
CREATE TABLE "PlayerTicketScore"(
    id SERIAL NOT NULL,
    "ticketPubkey" text NOT NULL,
    "userPubkey" text NOT NULL,
    score integer NOT NULL DEFAULT 0,
    "lastUpdated" timestamp without time zone NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT PlayerTicketScore_ticketPubkey_fkey FOREIGN key("ticketPubkey") REFERENCES "Ticket"(pubkey),
    CONSTRAINT PlayerTicketScore_userPubkey_fkey FOREIGN key("userPubkey") REFERENCES "User"(pubkey)
);
CREATE UNIQUE INDEX PlayerTicketScore_userPubkey_ticketPubkey_key ON "PlayerTicketScore" USING btree ("ticketPubkey","userPubkey");


-- create table for storing the leaderboard information
-- Generated by the database client.
CREATE TABLE "PerfectCombinationsLeaderboard"(
    id SERIAL NOT NULL,
    "userPubkey" text NOT NULL,
    combinations integer NOT NULL,
    rank integer NOT NULL,
    "updatedAt" timestamp without time zone NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT PerfectCombinationsLeaderboard_userPubkey_fkey FOREIGN key("userPubkey") REFERENCES "User"(pubkey)
);
CREATE UNIQUE INDEX PerfectCombinationsLeaderboard_userPubkey_key ON "PerfectCombinationsLeaderboard" USING btree ("userPubkey");


-- create table for storing the leaderboard information
-- Generated by the database client.
CREATE TABLE "TotalEarningsLeaderboard"(
    id SERIAL NOT NULL,
    "userPubkey" text NOT NULL,
    earnings double precision NOT NULL,
    currency "CurrencyType" NOT NULL,
    rank integer NOT NULL,
    "updatedAt" timestamp without time zone NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT TotalEarningsLeaderboard_userPubkey_fkey FOREIGN key("userPubkey") REFERENCES "User"(pubkey)
);
CREATE UNIQUE INDEX TotalEarningsLeaderboard_userPubkey_key ON "TotalEarningsLeaderboard" USING btree ("userPubkey");


-- create table for storing the leaderboard information
-- Generated by the database client.
CREATE TABLE "Transaction"(
    id SERIAL NOT NULL,
    "userPubkey" text NOT NULL,
    "ticketPubkey" text NOT NULL,
    amount double precision NOT NULL,
    "type" "TransactionType" NOT NULL,
    "createdAt" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT Transaction_ticketPubkey_fkey FOREIGN key("ticketPubkey") REFERENCES "Ticket"(pubkey),
    CONSTRAINT Transaction_userPubkey_fkey FOREIGN key("userPubkey") REFERENCES "User"(pubkey)
);
CREATE INDEX Transaction_userPubkey_idx ON "Transaction" USING btree ("userPubkey");
CREATE INDEX Transaction_ticketPubkey_idx ON "Transaction" USING btree ("ticketPubkey");
CREATE INDEX Transaction_userPubkey_ticketPubkey_idx ON "Transaction" USING btree ("userPubkey","ticketPubkey");


-- create table for storing the user field information
-- Generated by the database client.
CREATE TABLE "UserField"(
    id SERIAL NOT NULL,
    "userPubkey" text NOT NULL,
    "ticketPubkey" text NOT NULL,
    "initedField" jsonb NOT NULL,
    "currentField" jsonb NOT NULL,
    "updatedAt" timestamp without time zone NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT UserField_ticketPubkey_fkey FOREIGN key("ticketPubkey") REFERENCES "Ticket"(pubkey),
    CONSTRAINT UserField_userPubkey_fkey FOREIGN key("userPubkey") REFERENCES "User"(pubkey)
);
CREATE INDEX UserField_userPubkey_idx ON "UserField" USING btree ("userPubkey");
CREATE INDEX UserField_ticketPubkey_idx ON "UserField" USING btree ("ticketPubkey");
CREATE INDEX UserField_userPubkey_ticketPubkey_idx ON "UserField" USING btree ("ticketPubkey","userPubkey");
CREATE UNIQUE INDEX UserField_userPubkey_ticketPubkey_key ON "UserField" USING btree ("ticketPubkey","userPubkey");


-- create table for storing the user field history information
-- Generated by the database client.
CREATE TABLE "UserFieldHistory"(
    id SERIAL NOT NULL,
    "userPubkey" text NOT NULL,
    "ticketPubkey" text NOT NULL,
    "fieldValues" jsonb NOT NULL,
    "moveObject" jsonb NOT NULL,
    "changedAt" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT UserFieldHistory_ticketPubkey_fkey FOREIGN key("ticketPubkey") REFERENCES "Ticket"(pubkey),
    CONSTRAINT UserFieldHistory_userPubkey_fkey FOREIGN key("userPubkey") REFERENCES "User"(pubkey)
);
CREATE INDEX UserFieldHistory_userPubkey_idx ON "UserFieldHistory" USING btree ("userPubkey");
CREATE INDEX UserFieldHistory_ticketPubkey_idx ON "UserFieldHistory" USING btree ("ticketPubkey");
CREATE INDEX UserFieldHistory_userPubkey_ticketPubkey_idx ON "UserFieldHistory" USING btree ("userPubkey","ticketPubkey");


-- create table for storing the user ticket history earnings information
-- Generated by the database client.
CREATE TABLE "UserTicketHistoryEarnings"(
    id SERIAL NOT NULL,
    "userPubkey" text NOT NULL,
    "ticketPubkey" text NOT NULL,
    amount double precision NOT NULL,
    "totalAmount" double precision NOT NULL,
    "fromUserPubkey" text NOT NULL,
    status "EarningStatus" NOT NULL DEFAULT 'PENDING'::"EarningStatus",
    "createdAt" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT UserTicketHistoryEarnings_ticketPubkey_fkey FOREIGN key("ticketPubkey") REFERENCES "Ticket"(pubkey),
    CONSTRAINT UserTicketHistoryEarnings_userPubkey_fkey FOREIGN key("userPubkey") REFERENCES "User"(pubkey)
);
CREATE INDEX UserTicketHistoryEarnings_userPubkey_ticketPubkey_idx ON "UserTicketHistoryEarnings" USING btree ("userPubkey","ticketPubkey");
CREATE INDEX UserTicketHistoryEarnings_status_idx ON "UserTicketHistoryEarnings" USING btree ("status");


-- create table for storing the leaderboard information
-- Generated by the database client.
CREATE TABLE "WithdrawnEarningsLeaderboard"(
    id SERIAL NOT NULL,
    "userPubkey" text NOT NULL,
    earnings double precision NOT NULL,
    currency "CurrencyType" NOT NULL,
    rank integer NOT NULL,
    "updatedAt" timestamp without time zone NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT WithdrawnEarningsLeaderboard_userPubkey_fkey FOREIGN key("userPubkey") REFERENCES "User"(pubkey)
);
CREATE UNIQUE INDEX WithdrawnEarningsLeaderboard_userPubkey_key ON "WithdrawnEarningsLeaderboard" USING btree ("userPubkey");


